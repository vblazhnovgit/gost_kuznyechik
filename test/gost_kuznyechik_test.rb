require "test_helper"
include GostKuznyechik

# GOST R 34.13-2015 Kuznyechik test data
SelfTestGostKMasterKeyData = [ 
  0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 
	0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
  0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 
	0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef
].pack('C*').freeze

SelfTestGostKPlainText = [ 
  0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 
	0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 
	0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a,
  0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 
	0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a, 0x00,
  0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 
	0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a, 0x00, 0x11
].pack('C*').freeze

# ECB
SelfTestGostKEcbEncText = [
  0x7f, 0x67, 0x9d, 0x90, 0xbe, 0xbc, 0x24, 0x30, 
	0x5a, 0x46, 0x8d, 0x42, 0xb9, 0xd4, 0xed, 0xcd,
  0xb4, 0x29, 0x91, 0x2c, 0x6e, 0x00, 0x32, 0xf9, 
	0x28, 0x54, 0x52, 0xd7, 0x67, 0x18, 0xd0, 0x8b,
  0xf0, 0xca, 0x33, 0x54, 0x9d, 0x24, 0x7c, 0xee, 
	0xf3, 0xf5, 0xa5, 0x31, 0x3b, 0xd4, 0xb1, 0x57,
  0xd0, 0xb0, 0x9c, 0xcd, 0xe8, 0x30, 0xb9, 0xeb, 
	0x3a, 0x02, 0xc4, 0xc5, 0xaa, 0x8a, 0xda, 0x98
].pack('C*').freeze

# CTR
SelfTestGostKCtrSV = [
  0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xce, 0xf0, 
	0xa1, 0xb2, 0xc3, 0xd4, 0xe5, 0xf0, 0x01, 0x12
].pack('C*').freeze

SelfTestGostKCtrEncText = [
  0xf1, 0x95, 0xd8, 0xbe, 0xc1, 0x0e, 0xd1, 0xdb, 
	0xd5, 0x7b, 0x5f, 0xa2, 0x40, 0xbd, 0xa1, 0xb8,
  0x85, 0xee, 0xe7, 0x33, 0xf6, 0xa1, 0x3e, 0x5d, 
	0xf3, 0x3c, 0xe4, 0xb3, 0x3c, 0x45, 0xde, 0xe4,
  0xa5, 0xea, 0xe8, 0x8b, 0xe6, 0x35, 0x6e, 0xd3, 
	0xd5, 0xe8, 0x77, 0xf1, 0x35, 0x64, 0xa3, 0xa5,
  0xcb, 0x91, 0xfa, 0xb1, 0xf2, 0x0c, 0xba, 0xb6, 
	0xd1, 0xc6, 0xd1, 0x58, 0x20, 0xbd, 0xba, 0x73
].pack('C*').freeze

class GostKuznyechikTest < Minitest::Test
  def test_that_it_has_a_version_number
    refute_nil ::GostKuznyechik::VERSION
  end

  def test_ecb_standard
    key = SelfTestGostKMasterKeyData
    plainText = SelfTestGostKPlainText
    encryptedTest = SelfTestGostKEcbEncText

    encryptedText = KuznyechikEcb.new(key).encrypt(plainText)
    assert encryptedText == encryptedTest 
    
    decryptedText = KuznyechikEcb.new(key).decrypt(encryptedTest)
    assert decryptedText == plainText 
  end
  
  def test_ctr_standard
    key = SelfTestGostKMasterKeyData
    iv = SelfTestGostKCtrSV
    plain_text = SelfTestGostKPlainText
    encryptedTest = SelfTestGostKCtrEncText

    encrypted_text = KuznyechikCtr.new(key, iv, 16).crypt(plain_text)
    assert encrypted_text == encryptedTest
    
    decrypted_text = KuznyechikCtr.new(key, iv, 16).crypt(encryptedTest)
    assert decryptedText == plainText 
  end
end
